name: CI

on:
  push:
    branches:
      - crawler
      - har-file
      - swagger
      - brokencrystals
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * THU"

jobs:
  start_and_wait_scan:
    runs-on: ubuntu-20.04
    name: A job to run a Nexploit scan
    steps:
      - uses: actions/checkout@v2
      - run: |
          sudo apt update
          sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo apt-get install nodejs-dev node-gyp libssl1.0-dev
          sudo apt-get install nodejs npm
          sudo npm install -g @brightsec/cli --unsafe-perm=true
      - name: Save environment variables
        run: |
          printf "BRIGHT_TOKEN=${{ secrets.BRIGHT_TOKEN }}\nREPEATER=${{ secrets.REPEATER5 }}\n" > .env
          cat .env
      - name: Docker-Compose
        run: |
          sudo docker-compose --env-file=.env up -d
          sudo docker-compose config
      - run: sleep 30s
      - run: sudo docker-compose logs
      - name: Start Brightsec Scan üèÅ
        id: start
        run: |
          SCAN_ID=$(bright-cli scan:run                                                 \
            --test csrf dom_xss header_security secret_tokens open_buckets excess_data_exposure \                \
            --name "üíé Local GH BrokenCrystals for a '${GITHUB_REF##*/}' branch #${GITHUB_RUN_NUMBER}" \
            --crawler http://10.0.0.170:8090/api/config http://10.0.0.170:8090/  \
            --host-filter 10.0.0.170:8090                                 \
            --repeater ${{ secrets.REPEATER5 }}                           \
            --auth ${{ secrets.BC_LESSB_AUTH5 }}                          \ 
            --project ${{ secrets.PROJECT5 }}                             \
            --token ${{ secrets.BRIGHT_TOKEN }}                          \
            --cluster demo.brightsec.com)
          echo "SCAN_ID=$SCAN_ID" >> $GITHUB_ENV
      - name: Get the output scan url üîó
        run: |
          printf "Scan was started with ID https://app.brightsec.com/scans/$SCAN_ID"
      - name: Wait for issues ‚è≥
        run: |
          bright-cli scan:polling                 \
            --interval 30s                        \
            --timeout 10m                         \
            --token ${{ secrets.BRIGHT_TOKEN5 }}  \
            --breakpoint high_issue $SCAN_ID      \
            --cluster demo.brightsec.com
      - name: Stop Scan üõë
        continue-on-error: true
        if: ${{ always() }}
        run: bright-cli scan:stop --token ${{ secrets.BRIGHT_TOKEN5 }} $SCAN_ID --cluster demo.brightsec.com
